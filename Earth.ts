import Arctic from '@civ-clone/base-terrain-arctic/Arctic';
import Desert from '@civ-clone/base-terrain-desert/Desert';
import Forest from '@civ-clone/base-terrain-forest/Forest';
import Generator from '@civ-clone/core-world-generator/Generator';
import Grassland from '@civ-clone/base-terrain-grassland/Grassland';
import Hills from '@civ-clone/base-terrain-hills/Hills';
import Jungle from '@civ-clone/base-terrain-jungle/Jungle';
import Mountains from '@civ-clone/base-terrain-mountains/Mountains';
import Ocean from '@civ-clone/base-terrain-ocean/Ocean';
import Plains from '@civ-clone/base-terrain-plains/Plains';
import River from '@civ-clone/base-terrain-river/River';
import Swamp from '@civ-clone/base-terrain-swamp/Swamp';
import Terrain from '@civ-clone/core-terrain/Terrain';
import Tundra from '@civ-clone/base-terrain-tundra/Tundra';

type StringTerrain =
  | 'A'
  | 'D'
  | 'F'
  | 'G'
  | 'H'
  | 'J'
  | 'M'
  | 'O'
  | 'P'
  | 'R'
  | 'S'
  | 'T';

type TerrainLookup = { [key in StringTerrain]: typeof Terrain };

const terrainLookup: TerrainLookup = {
  A: Arctic,
  D: Desert,
  F: Forest,
  G: Grassland,
  H: Hills,
  J: Jungle,
  M: Mountains,
  O: Ocean,
  P: Plains,
  R: River,
  S: Swamp,
  T: Tundra,
};

export class Earth extends Generator {
  async generate(): Promise<Terrain[]> {
    // Map data from MAP>PIC converted using `civ1-asset-extractor`.
    return (
      // Excludes all the `TerrainFeature`s since we'll rely on those being added via the `Created` `Rule`s in
      //  `civ1-world`
      (
        Array.from(
          `OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
OOOOOOOOOOOOOOOOOOOOOOOOOAAAAAAAOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
OOOOOOOOOOOOOOOAAOAOAAAOAAAAAAAAOOOOOOAOOOOOGGOOOOOTAGOOOOOOOOOOOOOOOOOOOOOOOOOO
OOOOTTTTAOOOOAAAAAAAAOOOOAAAAAATOOOOOAAOOOOOOOOOOOOOOOAAOOOOOTOOOOOOOOOOOOOOOOOO
OOOTTTTTTTTTAAOAOAAAAAOOOAAAAATOOOOOOOOOOOOOOOAOOOOOFFAAFFFFFOOFFFOOOOFFFOOOOOOO
OTPTGPPPPTTTTTOTAAAOOAOOOAAAATOOOOOOOOOOOOOOOAOOAAOFFGAFFFFFFFAFFFFFFFFFFOTOOOOO
OOOOOPGTPTOOTTAAAAAAAAOOAAGGOOOOOOOOOOGAAOOOOOOGOGFFFGFFFFFFFFAFFAFFFFFGFGGOOOOO
OOOOOGGFGPPTTAAOOOAOTOOOAGOOOOAOOOOOOAFGFPGFOAAFGTGFFFFFFFFFFFFFFFGFFGOGFFOOOOOO
OOOOPMGFPPPPTTOOOATAAOOOOOOOOOOOOOOOGFPGGFOFFFFFFGFFFFFFFFFFFFFFGFFFFGOOFOOOOOOO
OOOOPMGFGPPOTTTAATTTTOOOOOOOOOOHOOOPFGOGGGFFFGFGGGFFFFFFFFFFFFFFFFFFOOOOFGOOOOOO
OOOOPHFFGPGOPPPOPTTTTOOOOOOOOOGROOOOOPOGFGFFGFFFGFGFGGFGGFFFGFFFFFFFGOOOOPOOOOOO
OOOOGGHFGPPPPPPPPPTPPOOOOOOOOOOFOOOFOOOFFFRFFFFRGFPFFPFGPFGFFOFFFFFGPPGOOOOOOOOO
OOOGGGMGGGPPPOPPPPPOPOOOOOOOOOGGOOOGPPFFFGRRFRRRGGFGGGGGPGGFFFFDPPPPPPOOOOOOOOOO
OOOGGFMGRGRPGORRGOPOOOOOOOOOOOOOOGRGGGGFFGFRFRPGPGGGGGPPPPPPPPPPPPPPGPGOOOOOOOOO
OOGGGMMGRGRGGGGOOOOOOOOOOOOOOOOOGGRMMGGGGPGRPRRPPPPPPPPPPPPPPPPPPPPPGPGOPGOOOOOO
OOGGPPHGRRRGGGOOOOOOOOOOOOOOOOOOPGGGGFGRRGPRPDOOPPOPPPDPDDDPPPPPPDPPPGOOGOOOOOOO
OOGFPPFGGRGGGPOOOOOOOOOOOOOOOOPPPPOGHOOGRFOOOHPOGPPDPDPDDPPPPPPDDPPOPGOOMGOOOOOO
OOGPPDDGGRGGOOOOOOOOOOOOOOOOOOPPPOOOGHOOOGPPPPPOPPPPDPPHPDDDDDDPPPGOOOOOOPOOOOOO
OOPOGDDPOOOPOOOOOOOOOOOOOOOOOOOOOOOOOGOOOOOPPPPGPPPPPPHHMHHHHHHHHMHPGOOGOOOOOOOO
OOPOGDDOOOOPOOOOOOOOOOOOOOOOOOGPPDDOOOOOOOOPPRRHPPPDPPHPGHMMMMMHHHPPPGOOOOOOOOOO
OOOOGDGOOOOOOOOOOOOOOOOOOOOOOODPHHPPPGODPOPPPGRRPPPPPHHRDPGMHHMHHPPRRROOOOOOOOOO
OOOOGGPOPOOOGPOOOOOOOOOOOOOOOPPHDDDPPPPDDRGDPPDOPPPPHPRRDGGGHHHHHPGPPPOOOOOOOOOO
OOOOOGGPGOOOOGPOOOOOOOOOOOOOPPDDDDDPDDDDDRDOPDDOOOOHHRRDPGGRGGGHGPGGPOOOOOOOOOOO
OOOOOOOOGGOOOOOOOOOOOOOOOOOOPDDDDDDDDDDDSRSODDDDDDOOOOPPGGGRRPPGFGGGOOOGOOOOOOOO
OOOOOOOOOGOOOOOOOOOOOOOOOOOPDDDDDDPPPDDDDRDOOPDDDDPOOOOGGGGGOOGGGGGOOOOPGOOOOOOO
OOOOOOOOOPPOGPPGOOOOOOOOOOODDDDDDDPDDDDDDRDDOODDDDOOOOOOGGGOOOPPGGOOOOOGGOOOOOOO
OOOOOOOOOOPGFPPPGOOOOOOOOOODDDDDDDDPDPDPPDHHDOOPDOOOOOOOGGOOOOOGGGGOOOOOFGOOOOOO
OOOOOOOOOOOGHGGGGGGOOOOOOOOPPDPPPPDDDPPPPPPMDPOOGOOOOOOOPGOOOOOOOGGOOOOOOGOOOOOO
OOOOOOOOOOOHJJJGGGGROOOOOOOOPPDPPPPPPPPPPPPHMDPOOOOOOOOOOGOOOOOOOOOOOPOOOOOOOOOO
OOOOOOOOOOGHJRRJJRRRGOOOOOOOOPPPGOPPGPGGGGGGMDDPOOOOOOOOOOOOOOOOOOOGPPOOGPOOOOOO
OOOOOOOOOOPGJJRRRRJGFGGOOOOOOOOOOOOGGGGJJJGGODPPOOOOOOOOOOOOOOOGFGOOPGFGGGOGOOOO
OOOOOOOOOOOFGGJJGJJFGGGPOOOOOOOOOOOGGJJRRRGGHPPOOOOOOOOOOOOOOOOOGFOOGOPGOOOPGGOO
OOOOOOOOOOOGHGGGGGGGGGGOOOOOOOOOOOOGGRRRJJHOGGOOOOOOOOOOOOOOOOOOOGOOOOOOOOOOOGGO
OOOOOOOOOOOOGMFGGGGGGPOOOOOOOOOOOOOOGRJJJGHMGOOOOOOOOOOOOOOOOOOOOPPOOOOOGOOOOOOO
OOOOOOOOOOOOGFMGGFGPPPOOOOOOOOOOOOOORRGGGGGMPOOOOOOOOOOOOOOOOOOOOOGOOOOOOOPGOOOO
OOOOOOOOOOOOOOHMGGRPGGOOOOOOOOOOOOOOOGGGGGGHGOOOOOOOOOOOOOOOOOOOOOOOOOOGGPGPGGOO
OOOOOOOOOOOOOOGHGGRGGOOOOOOOOOOOOOOOODPPGGGGGGOOOOOOOOOOOOOOOOOOOOOOOOOGGPPPPGOO
OOOOOOOOOOOOOOGMGPRROOOOOOOOOOOOOOOOPPPPPPPGGGOPOOOOOOOOOOOOOOOOOOOOGGPPPDDDPPPO
OOOOOOOOOOOOOOGMGGGPOOOOOOOOOOOOOOOOHPDDPPGGOOOPOOOOOOOOOOOOOOOOOOOGGGPDDDDDDPFO
OOOOOOOOOOOOOOPMGGGOOOOOOOOOOOOOOOOOOPPDPPGGOOOGOOOOOOOOOOOOOOOOOOOGPDDDDDDDDPPO
OOOOOOOOOOOOOOOMGPOOOOOOOOOOOOOOOOOOOHPPPGGGOOGPOOOOOOOOOOOOOOOOOOOGDDDDDPDDDPGO
OOOOOOOOOOOOOOOGGOOOOOOOOOOOOOOOOOOOOHPPGHGOOOPOOOOOOOOOOOOOOOOOOOODDDDDDDPDDHFO
OOOOOOOOOOOOOOOPGOOOOOOOOOOOOOOOOOOOOODPGHGOOOOOOOOOOOOOOOOOOOOOOOODDDOOGDDDHGOO
OOOOOOOOOOOOOOOOGOOOOOOOOOOOOOOOOOOOOOPGGGOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOGHHHGOOO
OOOOOOOOOOOOOOOOFOOOOOOOOOOOOOOOOOOOOOGOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOPGOOOO
OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
`.replace(/\n/g, '')
        ) as StringTerrain[]
      ).map((terrainId) => new terrainLookup[terrainId]())
    );
  }

  height(): number {
    return 50;
  }

  width(): number {
    return 80;
  }
}

export default Earth;
